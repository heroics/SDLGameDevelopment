#ifndef INPUTHANDLER_H
#define INPUTHANDLER_H
#include "Vector2D.h"
#include <SDL2/SDL.h>
#include <iostream>
#include <vector>
// Enum
enum MouseButtons
{
    LEFT = 0,
    MIDDLE = 1,
    RIGHT = 2
};
class InputHandler
{
public:
    // Init joystick(s)
    void initialiseJoysticks();
    bool areJoysticksInitialised()
    {
        return isJoysticksInitialised;
    }
    // Reset Mouse
    void reset();
    // Update and clean input handler
    void update();
    void clean();
    // Keyboard Event
    bool isKeyDown(SDL_Scancode key) const;
    // Joystick events
    int getAxisX(int identifier, int stick) const;
    int getAxisY(int identifier, int stick) const;
    bool getJoyStickButtonState(int joystick, int buttonNumber) const;
    // Mouse Event
    bool getMouseButtonState(int buttonNumber) const;
    Vector2D *getMousePosition() const;
    static InputHandler *Instance()
    {
        if (staticPtrInstance == nullptr)
        {
            staticPtrInstance = new InputHandler();
            return staticPtrInstance;
        }
        return staticPtrInstance;
    }

protected:
private:
    InputHandler();
    ~InputHandler();
    InputHandler(const InputHandler &);
    InputHandler &operator=(const InputHandler &);
    // Handle Keyboard Events
    void onKeyDown();
    void onKeyUp();
    // Handle Mouse
    void onMouseMove(SDL_Event &event);
    void onMouseButtonDown(SDL_Event &event);
    void onMouseButtonUp(SDL_Event &event);
    // Handle Joystick
    void onJoystickAxisMove(SDL_Event &event);
    void onJoystickButtonDown(SDL_Event &event);
    void onJoystickButtonDow(SDL_Event &event);
    // Member Variables
    const int joystickDeadZone = 10000;
    std::vector<SDL_Joystick *> joysticks;
    std::vector<std::pair<Vector2D *, Vector2D *>> joystickValues;
    std::vector<std::vector<bool>> joystickButtonStates;
    std::vector<bool> mouseButtonStates;
    bool isJoysticksInitialised;
    const Uint8 *keyState;
    Vector2D *mousePosition;
    // Singleton
    static InputHandler *staticPtrInstance;
};
// Singleton
typedef InputHandler TheInputHandler;
#endif // INPUTHANDLER_H
